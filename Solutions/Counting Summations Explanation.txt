
Now, if 2 + 3, and 3 + 2 were considered different sums i.e. if the order of the summands mattered, then

f(0) = 1
f(n) = f(n) - i, i <= n 

Also, it can be shown that f(n) = 2^(n - 1)

But, the order of summands doesn't matter and we need to find a way to ensure that each summand is only counted once. 
One way to do it is to refer to each sum, by it's largest summand.

f(n, L) be the number of ways to sum up to n, with the largest summand <= L

f(0, L) = 1
f(n, 1) = 1
f(n, L) = f(n, L - 1) + f(n - L, L)


Answer is f(n, n - 1)

--------------------------------------------------

const int MAX_N = 101;
long long no_of_ways[MAX_N][MAX_N] = {{0}};

int get(int n, int largest_part)
{
    if(no_of_ways[n][largest_part] == -1)
    {
        if(n == 0)
            no_of_ways[n][largest_part] = 1;
        else if(largest_part == 1)
            no_of_ways[n][largest_part] = 1;
        else
        {
            no_of_ways[n][largest_part] = get(n, largest_part - 1);

            if(largest_part <= n)
                no_of_ways[n][largest_part] += get(n - largest_part, largest_part);
        }
    }

    return no_of_ways[n][largest_part];
}

int main()
{
    const int N = 100;
    memset(no_of_ways, -1, sizeof(no_of_ways));

    printf("The number of ways to write 100 as a sum of atleast 2 integers is %d.\n", get(N, N - 1));

    return 0;
}

---------------------------------------------------------------
The number of ways to write 100 as a sum of atleast 2 integers is 190569291.