
Now, let's say we know the number of fractions where the denominator goes till d - 1.

If we now count fractions who's denominator is d, how many new fractions do we get ? 
Answer = phi(d)

If gcd(n, d) = 1, 

then n/d is a new fraction

Else we cancel out the common factors and get n'/d' , where d' < d. 
But, we have already counted d' so we need not count again.

Answer = sum(phi(i)), i goes from 2 to N. Be careful not to include totient(1)

I computed phi(n) using a sieve.

phi(n) is a multiplicative function. 

phi(n) = {p^a - p^(a - 1)}. phi(n'), where n = p^a. n' and gcd(p, n') = 1

For each n, find the exponent of it's largest prime factor and then use the value of totient(n') to find totient(n).

----------------------------------------------------------

int main()
{
    const int LIMIT = 1e6;
    vector <int> largest_prime_factor(LIMIT + 1, 0);

    for(int i = 2; i <= LIMIT; i++)
    {
        if(largest_prime_factor[i] == 0)
            for(int multiple = i; multiple <= LIMIT; multiple += i)
                largest_prime_factor[multiple] = i;
    }

    vector <int> totient(LIMIT + 1, 0);
    totient[1] = 1;
    for(int i = 2; i <= LIMIT; i++)
    {
        int p = largest_prime_factor[i];
        int reduced_i = i;

        int p_power_alpha = 1;


        while(reduced_i%p == 0)
        {
            p_power_alpha *=p;
            reduced_i /= p;
        }

        totient[i] = (p_power_alpha - p_power_alpha/p)*totient[reduced_i];
    }

    vector <long long> totient_sum_till(LIMIT + 1, 0);
    for(int i = 2; i <= LIMIT; i++)
        totient_sum_till[i] = totient_sum_till[i - 1] + totient[i];

    printf("The number of fractions with d <= %d is %I64d.\n", LIMIT, totient_sum_till[LIMIT]);
    return 0;
}

---------------------------------------------------

The number of fractions with d <= 1000000 is 303963552391.