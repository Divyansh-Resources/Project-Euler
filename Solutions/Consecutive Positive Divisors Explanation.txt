

------------------------------------------------

The number of divisors of n is a multiplicative function.

d(n) = (a1 + 1).(a2 + 1) ... (an + 1), where a1, a2 ... an are all exponents of the prime factors.

For these kinds of multiplicative functions, it is useful to keep track of the largest prime factor of every number.

Do a sieve. IF a number's largest prime factor is 0, that means it is prime. Mark all of it's multiples' largest prime factors as p.
It has 2 divisors.

Else, the number of divisors = (a1 + 1)f(n'), where a1 is the exponent of the largest prime in n and n = p1^{a1}. n'

-----------------------------------------------------

#include <cstdio>

const int LIMIT = 1e7 + 1;
int largest_prime_factor[LIMIT] = {0};
long long no_of_divisors[LIMIT] = {0};

int main()
{
    int no_of_pairs = 0;

    no_of_divisors[1] = 1;
    for(int i = 2; i < LIMIT; i++)
    {
        if(largest_prime_factor[i] == 0)
        {
            no_of_divisors[i] = 2;

            for(int multiple = 2*i; multiple < LIMIT; multiple += i)
                largest_prime_factor[multiple] = i;
        }
        else
        {
            int p = largest_prime_factor[i];
            int reduced_i = i;

            int exponent = 0;

            while(reduced_i%p == 0)
            {
                reduced_i /= p;
                exponent++;
            }

            no_of_divisors[i] = (exponent + 1)*no_of_divisors[reduced_i];
        }

        no_of_pairs += (no_of_divisors[i] == no_of_divisors[i - 1]);
    }

    printf("There are %d integers n, such that n and n+1 have the same number of divisors below 10 million.\n", no_of_pairs);
    return 0;
}


------------------------------------------

There are 986262 integers n, such that n and n+1 have the same number of divisors below 10 million.

