
Looking at a few values, it gets kind of apparent that the answer is the n with the highest number of prime factors.

phi(n) = n product(1 - 1/p) = (p1 - 1)(p2 - 1) ... (pn - 1)/ (p1.p2. ... pn)

So, notice that n/phi(n) = (p1.p2. ... pn)/(p1 - 1).(p2 - 1) ... (pn - 1)

is the reciprocal of this.

Also notice that n/phi(n) is independent of the powers of the respective prime factor.

In other words, if two integers n1 and n2 have the same number of prime factors, they will have the same n/phi(n) value irrespective of the exponents of the prime factors.

Now,

Notice that         p > (p - 1)
         => p/(p - 1) > 1.

So, p1.p2/ (p1 - 1).(p2 - 1) > p1/(p1 - 1)

Because the RHS has been multiplied by a factor greater than 1.

This completes the proof that n/phi(n) is maximised at the n which has the greatest number of prime factors.

Precompute this and for each query, find the number with the greatest number of prime factors smaller than n.

------------------------------------------------------

void precompute(vector <int> &primes, int LIMIT)
{
    vector <int> is_prime(LIMIT + 1, true);
    is_prime[0] = is_prime[1] = false;

    for(int i = 2; i <= LIMIT; i++)
    {
        if(is_prime[i])
            primes.push_back(i);

        for(int j = 0; j < primes.size() && i*primes[j] <= LIMIT; j++)
        {
            is_prime[i*primes[j]] = false;

            if(i%primes[j] == 0) break;
        }
    }
}

int main()
{
    const int LIMIT = 100;
    vector <int> primes;
    precompute(primes, LIMIT);

    vector <long long> prime_product;
    prime_product.push_back(2);

    const long long MAX_VALUE = 1e18;
    for(int i = 1; prime_product.back() <= MAX_VALUE/primes[i]; i++)
    {
        prime_product.push_back(prime_product.back()*primes[i]);
    }

    long long n;

    printf("Enter the n for which n/phi(n) has to be maximised. n > 2 and n < 1e18. \n");
    scanf("%I64d", &n);

    int answer_index = lower_bound(all(prime_product), n) - prime_product.begin() - 1;
    long long answer = prime_product[answer_index];

    printf("n/phi(n) is maximum at %I64d\n", answer);
    return 0;
}

---------------------------------------------

Enter the n for which n/phi(n) has to be maximised. n > 2 and n < 1e18.
1000000
n/phi(n) is maximum at 510510